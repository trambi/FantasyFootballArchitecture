<?php
/*
    FantasyFootball Symfony2 bundles - Symfony2 bundles collection to handle fantasy football tournament 
    Copyright (C) 2017  Bertrand Madet

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
namespace FantasyFootball\TournamentCoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{

  public function countScheduledGamesByEditionAndRound($editionId,$round){
    $count = $this->getQueryBuilderCountForScheduledGamesByEditionAndRound($editionId,$round)
                  ->getQuery()
                  ->getSingleScalarResult();
    return $count;
  }
  
  public function getQueryBuilderCountForScheduledGamesByEditionAndRound($editionId,$round){
    $qb = $this->createQueryBuilder('g');
    $qb->select('COUNT(g)')
        ->where($qb->expr()->andX(
          $qb->expr()->eq('g.edition', $editionId),
          $qb->expr()->eq('g.round',$round),
          $qb->expr()->eq('g.status','\''.Game::SCHEDULED.'\'')));
    return $qb;
  }

  public function countGamesByEdition($editionId){
    $qb = $this->createQueryBuilder('g');
    $qb->select('COUNT(g)')
        ->where($qb->expr()->eq('g.edition', $editionId));
    return $qb->getQuery()->getSingleScalarResult();
  }

  public function getMaxTableNumberByEditionAndRound($editionId,$round){
    $qb = $this->createQueryBuilder('g');
    $qb->select('MAX(g.tableNumber)')
        ->where($qb->expr()->andX(
          $qb->expr()->eq('g.edition', $editionId),
          $qb->expr()->eq('g.round',$round)));
    $max = $qb->getQuery()->getSingleScalarResult();
    return $max;
  }
}
